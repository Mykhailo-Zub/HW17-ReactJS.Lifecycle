{"version":3,"sources":["components/time/Time.module.css","components/time/Time.js","components/Timer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Time","hours","minutes","seconds","timebarColor","timebarWidth","startTime","timebarStep","className","style","clock","backgroundColor","width","maxWidth","height","transition","Timer","timerId","time","step","autoStart","active","defaultTime","onTick","onTimeEnd","onTimeStart","onTimePause","useState","isActive","setActive","currentTime","setCurrentTime","isAutostart","setIsAutostart","setHhours","setMinutes","setSeconds","useEffect","timerStart","clearInterval","setInterval","timeFormatter","Math","floor","randomColor","random","onClick","timerSettings","App","autostart","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a13b9ad1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"clock\":\"Time_clock__3JNiG\",\"seconds\":\"Time_seconds__1U7dA\"};","import React from \"react\";\r\n\r\nimport style from \"./Time.module.css\";\r\n\r\nconst Time = ({\r\n    hours,\r\n    minutes,\r\n    seconds,\r\n    timebarColor,\r\n    timebarWidth,\r\n    startTime,\r\n    timebarStep,\r\n}) => (\r\n    <>\r\n        <div className={style.clock}>\r\n            <span>{hours}</span>\r\n            <span>:</span>\r\n            <span>{minutes}</span>\r\n            <span>:</span>\r\n            <span className={style.seconds}>{seconds}</span>\r\n        </div>\r\n        <div\r\n            style={{\r\n                backgroundColor: `${timebarColor}`,\r\n                width: `calc(${timebarWidth} * 100% / ${startTime})`,\r\n                maxWidth: \"100%\",\r\n                height: \"80px\",\r\n                transition: `${timebarStep}s`,\r\n            }}\r\n        ></div>\r\n    </>\r\n);\r\n\r\nexport default Time;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport Time from \"./time/Time\";\r\n\r\nconst Timer = ({\r\n    time,\r\n    step,\r\n    autoStart,\r\n    active,\r\n    defaultTime,\r\n    onTick,\r\n    onTimeEnd,\r\n    onTimeStart,\r\n    onTimePause,\r\n}) => {\r\n    const [isActive, setActive] = useState(active);\r\n    const [currentTime, setCurrentTime] = useState(time);\r\n    const [isAutostart, setIsAutostart] = useState(autoStart);\r\n    const [hours, setHhours] = useState(\"00\");\r\n    const [minutes, setMinutes] = useState(\"00\");\r\n    const [seconds, setSeconds] = useState(\"00\");\r\n\r\n    let timerId;\r\n\r\n    useEffect(() => {\r\n        if (isAutostart) {\r\n            setIsAutostart(false);\r\n            setActive(true);\r\n            onTimeStart();\r\n        }\r\n    }, [isAutostart]);\r\n\r\n    useEffect(() => {\r\n        if (isActive) {\r\n            timerStart();\r\n        }\r\n        return () => {\r\n            clearInterval(timerId);\r\n        };\r\n    });\r\n\r\n    const timerToggler = () => {\r\n        if (isActive) {\r\n            clearInterval(timerId);\r\n            onTimePause();\r\n        } else {\r\n            timerStart();\r\n            onTimeStart();\r\n        }\r\n    };\r\n\r\n    const timerStart = () => {\r\n        timerId = setInterval(() => {\r\n            if (currentTime) {\r\n                setCurrentTime(currentTime - step);\r\n                timeFormatter(currentTime);\r\n                onTick(currentTime);\r\n            }\r\n            if (currentTime < 1) {\r\n                clearInterval(timerId);\r\n                onTimeEnd();\r\n                setActive(false);\r\n                setCurrentTime(defaultTime);\r\n                timeFormatter(defaultTime);\r\n            }\r\n        }, step);\r\n    };\r\n\r\n    const timeFormatter = (time) => {\r\n        const seconds = time / 1000;\r\n        setHhours(() => {\r\n            if (Math.floor(seconds / 3600) < 10) {\r\n                return \"0\" + Math.floor(seconds / 3600);\r\n            } else return Math.floor(seconds / 3600);\r\n        });\r\n        setMinutes(() => {\r\n            if (Math.floor((seconds % 3600) / 60) < 10) {\r\n                return \"0\" + Math.floor((seconds % 3600) / 60);\r\n            } else return Math.floor((seconds % 3600) / 60);\r\n        });\r\n        setSeconds(() => {\r\n            if (Math.floor((seconds % 3600) % 60) < 10) {\r\n                return \"0\" + Math.floor((seconds % 3600) % 60);\r\n            } else return Math.floor((seconds % 3600) % 60);\r\n        });\r\n    };\r\n\r\n    const randomColor = () => Math.floor(Math.random() * 255);\r\n\r\n    return (\r\n        <>\r\n            <button\r\n                onClick={() => {\r\n                    setActive(!isActive);\r\n                    timerToggler();\r\n                }}\r\n            >\r\n                {isActive ? \"Stop\" : \"Start\"} timer\r\n            </button>\r\n            <Time\r\n                hours={hours}\r\n                minutes={minutes}\r\n                seconds={seconds}\r\n                timebarColor={`rgb(${randomColor()}, ${randomColor()}, ${randomColor()})`}\r\n                timebarWidth={currentTime + step}\r\n                startTime={time}\r\n                timebarStep={step / 1000}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Timer;\r\n","import React from \"react\";\n\nimport Timer from \"./components/Timer\";\n\nconst timerSettings = {\n    time: 15000,\n    step: 1000,\n    autostart: true,\n    active: false,\n};\n\nfunction App() {\n    const { time, step, autostart, active } = timerSettings;\n    return (\n        <div className=\"wrapper\">\n            <Timer\n                time={time}\n                step={step}\n                autoStart={autostart}\n                active={active}\n                defaultTime={time}\n                onTick={(time) => console.log(\"Time left: \" + time + \"ms\")}\n                onTimeEnd={() => console.log(\"Time is over!\")}\n                onTimeStart={() => console.log(\"Timer started\")}\n                onTimePause={() => console.log(\"Timer paused\")}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}